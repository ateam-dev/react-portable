// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`preparePlugin > Install the route file if \`previewify\` is called in the file 1`] = `
{
  "/app/.portable/routes/pfy-sample/index.jsx": "import { qwikify$ } from \\"@builder.io/qwik-react\\";
import { component$ } from \\"@builder.io/qwik\\";
import { routeLoader$ } from \\"@builder.io/qwik-city\\";
import * as Entries from \\"/app/src/index.ts\\";

const Entry = Object.values(Entries).find((module) => {
  if (
    [\\"function\\", \\"object\\"].includes(typeof module) &&
    module !== null &&
    \\"__code\\" in module
  )
    return module.__code === \\"pfy-sample\\";
});

const QComponent = qwikify$(Entry.__forQwik, {
  eagerness: \\"idle\\",
});

const getProps = routeLoader$(async ({ request }) => {
  if (request.method === \\"POST\\") return await request.json();

  return {};
});

export default component$(() => {
  return <QComponent {...getProps().value} />;
});
",
}
`;

exports[`preparePlugin > when \`config\` will be called, \`entry.ssr.jsx\` will be placed 1`] = `
{
  "/app/.portable/entry.ssr.jsx": "import { renderToStream } from \\"@builder.io/qwik/server\\";
import { manifest } from \\"@qwik-client-manifest\\";
import { QwikCityProvider, RouterOutlet } from \\"@builder.io/qwik-city\\";
import { component$ } from \\"@builder.io/qwik\\";

const Root = component$(() => (
  <QwikCityProvider>
    <RouterOutlet />
  </QwikCityProvider>
));

export default function (opts) {
  return renderToStream(<Root />, {
    manifest,
    ...opts,
    containerTagName: \\"rp-fragment\\",
    qwikLoader: { include: \\"always\\" },
  });
}
",
}
`;
